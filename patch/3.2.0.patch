diff -rN -U0 src-3.2.0-vendor/cmake/config.cmake src-3.2.0-perturb/cmake/config.cmake
--- src-3.2.0-vendor/cmake/config.cmake
+++ src-3.2.0-perturb/cmake/config.cmake
@@ -2 +2 @@
-find_package(PythonInterp)
+find_package(PythonInterp 2)
diff -rN -U0 src-3.2.0-vendor/python/advantg/driver.py src-3.2.0-perturb/python/advantg/driver.py
--- src-3.2.0-vendor/python/advantg/driver.py
+++ src-3.2.0-perturb/python/advantg/driver.py
@@ -25,0 +26,2 @@
+from perturbation import perturbation, print_vars
+
@@ -192,0 +195,7 @@
+
+    # Perturbation
+    s = print_vars.print_all(options, materials, anisn_lib, zaid_map, mglib,
+                             model, solver_class, method, solutions, outputs)
+    if not os.path.exists('custom_output'): os.makedirs('custom_output')
+    with open('custom_output/vars.txt', 'wb') as writer: writer.write(s)
+    perturbation.perturb(model, materials, solutions)
diff -rN -U0 src-3.2.0-vendor/python/advantg/input.py src-3.2.0-perturb/python/advantg/input.py
--- src-3.2.0-vendor/python/advantg/input.py
+++ src-3.2.0-perturb/python/advantg/input.py
@@ -14,0 +15 @@
+import perturbation
@@ -51 +52,2 @@
-    ("solver",      Module(solvers.denovo,  {"solver" : "denovo"})   )
+    ("solver",      Module(solvers.denovo,  {"solver" : "denovo"})   ),
+    ("perturbation", Module(perturbation)                            )
diff -rN -U0 src-3.2.0-vendor/python/advantg/perturbation/__init__.py src-3.2.0-perturb/python/advantg/perturbation/__init__.py
--- src-3.2.0-vendor/python/advantg/perturbation/__init__.py
+++ src-3.2.0-perturb/python/advantg/perturbation/__init__.py
@@ -0,0 +1 @@
+from options import get_ui_fields, finalize_ui_data
diff -rN -U0 src-3.2.0-vendor/python/advantg/perturbation/options.py src-3.2.0-perturb/python/advantg/perturbation/options.py
--- src-3.2.0-vendor/python/advantg/perturbation/options.py
+++ src-3.2.0-perturb/python/advantg/perturbation/options.py
@@ -0,0 +1,10 @@
+from advantg.ui import UIPath
+
+ui_fields = {}
+ui_fields['pert_temporary'] = UIPath(
+    desc='Temporary keyword',
+    isfile=True,
+    required=False)
+
+def get_ui_fields(): return ui_fields
+def finalize_ui_data(data, user_keys): return data
diff -rN -U0 src-3.2.0-vendor/python/advantg/perturbation/perturbation.py src-3.2.0-perturb/python/advantg/perturbation/perturbation.py
--- src-3.2.0-vendor/python/advantg/perturbation/perturbation.py
+++ src-3.2.0-perturb/python/advantg/perturbation/perturbation.py
@@ -0,0 +1,71 @@
+import os
+from itertools import product
+import numpy as np
+import h5py
+
+from advantg.utils import time_this
+
+def add_array(hf, name, data):
+    hf.create_dataset(name, data=data, compression='gzip', compression_opts=0)
+
+@time_this.with_label("Writing additional information to HDF5")
+def perturb(model, materials, solutions):
+    # Open HDF5 file for writing
+    hf = h5py.File('custom_output/data1.h5', 'w')
+
+    # Number of mesh intervals
+    nx = len(model.mesh.x) - 1
+    ny = len(model.mesh.y) - 1
+    nz = len(model.mesh.z) - 1
+
+    # Total number of energy groups in cross sections (i.e. 46 for 27n19g)
+    igm = model.mglib['igm']
+
+    # Source data
+    source = model.map_sources().volume_sources[0]
+    add_array(hf, 'source_indices'  , source.indices  )
+    add_array(hf, 'source_strengths', source.strengths)
+    add_array(hf, 'source_spectrum' , source.spectrum )
+
+    # Response data
+    response = model.cache['response_data'].volume_sources[0]
+    add_array(hf, 'response_indices'  , response.indices  )
+    add_array(hf, 'response_strengths', response.strengths)
+    add_array(hf, 'response_spectrum' , response.spectrum )
+
+    # List of material names
+    mat_names = np.array([mat.name for mat in materials])
+    add_array(hf, 'mat_names', mat_names)
+
+    # Mix table
+    mix_table = model.cache['material_data'].mix_table._rows
+    num_mixed = len(mix_table)
+    num_mats  = len(materials)
+    mix_table_large = np.zeros((num_mixed, num_mats))
+    for i_mix, fracs in enumerate(mix_table):
+        for i_mat, frac in fracs: mix_table_large[i_mix, i_mat] = frac
+    add_array(hf, 'mix_table', mix_table_large)
+
+    # Material map
+    material_map = np.zeros((nz, ny, nx), dtype=np.int32)
+    for iz, iy, ix in product(xrange(nz), xrange(ny), xrange(nx)):
+        ind = model.cache['material_data'].ids.from_ijk(ix, iy, iz)
+        material_map[iz, iy, ix] = ind
+    add_array(hf, 'material_map', material_map)
+
+    # Cross sections for pure materials
+    sigma_t = np.zeros((num_mats, igm     ))
+    sigma_s = np.zeros((num_mats, igm, igm))
+    for i, mat in enumerate(materials):
+        # Cross sections
+        xs = model.mglib.macro_xs[i]
+        # Total cross section
+        sigma_t[i, :] = [xs.total(x) for x in xrange(xs.igm)]
+        # Scattering matrix (g = initial group, gp = final group)
+        sigma_s[i, :, :] = [[xs.scatter(gp, g) for gp in xrange(xs.igm)]
+                            for g in xrange(xs.igm)]
+    add_array(hf, 'sigma_t', sigma_t)
+    add_array(hf, 'sigma_s', sigma_s)
+
+    # Close HDF5 file
+    hf.close()
diff -rN -U0 src-3.2.0-vendor/python/advantg/perturbation/print_vars.py src-3.2.0-perturb/python/advantg/perturbation/print_vars.py
--- src-3.2.0-vendor/python/advantg/perturbation/print_vars.py
+++ src-3.2.0-perturb/python/advantg/perturbation/print_vars.py
@@ -0,0 +1,235 @@
+import inspect
+import numpy as np
+
+screen_width = 211
+var_width = 51
+
+val_width = screen_width - var_width - 7
+print_str = '%-' + str(var_width) + 's | %s\n'
+
+def format_output(s):
+    if len(str(s)) > val_width: return str(s)[:val_width] + ' ...'
+    else: return str(s)
+
+def print_title(title):
+    s = ''
+    s += '-' * screen_width + '\n'
+    s += ' ' * ((screen_width - len(title)) / 2) + title + '\n'
+    s += '-' * screen_width + '\n'
+    s += '\n'
+    return s
+
+def print_options(options):
+    s = print_title('options')
+    for i in sorted(options):
+        a = options[i]
+        for j in sorted(a):
+            b = a[j]
+            s += print_str % ('[\'%s\'][\'%s\']' % (i, j), format_output(b))
+    s += '\n'
+    return s
+
+def print_materials(materials):
+    s = print_title('materials')
+    if not materials:
+        s += print_str % ('', format_output(a))
+    for i, a in enumerate(materials):
+        s += print_str % ('[%u]' % (i), format_output(a))
+    s += '\n'
+    return s
+
+def print_anisn_lib(anisn_lib):
+    s = print_title('anisn_lib')
+    for i in sorted(anisn_lib):
+        a = anisn_lib[i]
+        s += print_str % ('[\'%s\']' % (i), format_output(a))
+    for i in sorted(vars(anisn_lib)):
+        a = vars(anisn_lib)[i]
+        s += print_str % ('.%s' % (i), format_output(a))
+    s += '\n'
+    return s
+
+def print_zaid_map(zaid_map):
+    s = print_title('zaid_map')
+    s += print_str % ('', format_output(zaid_map))
+    s += '\n'
+    return s
+
+def print_mglib(mglib):
+    s = print_title('mglib')
+    for i in sorted(mglib):
+        a = mglib[i]
+        s += print_str % ('[\'%s\']' % (i), format_output(a))
+    for i in sorted(vars(mglib)):
+        a = vars(mglib)[i]
+        if not a:
+            s += print_str % ('.%s' % (i), format_output(a))
+            continue
+        for j, b in enumerate(a):
+            if not b:
+                s += print_str % ('.%s[%u]' % (i, j), format_output(b))
+                continue
+            for k in sorted(vars(b)):
+                c = vars(b)[k]
+                if k == 'data':
+                    s += print_str % ('.%s[%u].%s' % (i, j, k), format_output('<array of length %u (%u nonzero)>' % (len(c), np.sum(np.array(c) != 0))))
+                else:
+                    s += print_str % ('.%s[%u].%s' % (i, j, k), format_output(c))
+    s += '\n'
+    return s
+
+def print_model(model):
+    s = print_title('model')
+    for i in sorted(vars(model)):
+        a = vars(model)[i]
+        if i == 'cache':
+            for j in sorted(a):
+                b = a[j]
+                if j == 'material_data':
+                    for k in sorted(vars(b)):
+                        c = vars(b)[k]
+                        s += print_str % ('.%s[\'%s\'].%s' % (i, j, k), format_output(c))
+                elif j == 'materials':
+                    if not b:
+                        s += print_str % ('.%s[\'%s\']' % (i, j), format_output(b))
+                        continue
+                    for k, c in enumerate(b):
+                        s += print_str % ('.%s[\'%s\'][%u]' % (i, j, k), format_output(c))
+                elif j == 'response_data':
+                    for k, c in sorted(inspect.getmembers(b)):
+                        if k.startswith('_'): continue
+                        if not c:
+                            s += print_str % ('.%s[\'%s\'].%s' % (i, j, k), format_output(c))
+                            continue
+                        for l, d in enumerate(c):
+                            for m, e in sorted(inspect.getmembers(d)):
+                                if m.startswith('_'): continue
+                                s += print_str % ('.%s[\'%s\'].%s[%u].%s' % (i, j, k, l, m), format_output(e))
+                else:
+                    s += print_str % ('.%s/%s' % (i, j), format_output(b))
+        elif i == 'groups':
+            if not a:
+                s += print_str % ('.%s' % (i), format_output(a))
+                continue
+            for j, b in enumerate(a):
+                s += print_str % ('.%s[%u]' % (i, j), format_output(b))
+        elif i == 'mesh':
+            for j, b in sorted(inspect.getmembers(a)):
+                if j.startswith('_'): continue
+                if callable(b): continue
+                s += print_str % ('.%s.%s' % (i, j), format_output(b))
+        elif i == 'mglib':
+            for j in sorted(a):
+                b = a[j]
+                s += print_str % ('.%s[\'%s\']' % (i, j), format_output(b))
+            for j in sorted(vars(a)):
+                b = vars(a)[j]
+                if not b:
+                    s += print_str % ('.%s.%s' % (i, j), format_output(b))
+                    continue
+                for k, c in enumerate(b):
+                    s += print_str % ('.%s.%s[%s]' % (i, j, k), format_output(c))
+        elif i == 'options':
+            for j in sorted(a):
+                b = a[j]
+                s += print_str % ('.%s[\'%s\']' % (i, j), format_output(b))
+        else:
+            s += print_str % ('.%s' % (i), format_output(a))
+    sources = model.map_sources()
+    for i, a in sorted(inspect.getmembers(sources)):
+        if i.startswith('_'): continue
+        if not a:
+            s += print_str % ('.map_sources().%s' % (i), format_output(a))
+            continue
+        for j, b in enumerate(a):
+            for k, c in sorted(inspect.getmembers(b)):
+                if k.startswith('_'): continue
+                s += print_str % ('.map_sources().%s[%u].%s' % (i, j, k), format_output(c))
+    s += '\n'
+    return s
+
+def print_solver_class(solver_class):
+    s = print_title('solver_class')
+    for i, a in sorted(inspect.getmembers(solver_class)):
+        if i.startswith('_'): continue
+        if i == 'options':
+            for j in sorted(a):
+                b = a[j]
+                s += print_str % ('.%s[\'%s\']' % (i, j), format_output(b))
+        else:
+            s += print_str % ('.%s' % (i), format_output(a))
+    s += '\n'
+    return s
+
+def print_method(method):
+    s = print_title('method')
+    for i in sorted(vars(method)):
+        a = vars(method)[i]
+        if i == 'calculator':
+            for j in sorted(vars(a)):
+                if j.startswith('_'): continue
+                b = vars(a)[j]
+                s += print_str % ('.%s.%s' % (i, j), format_output(b))
+        if i == 'options':
+            for j in sorted(a):
+                b = a[j]
+                s += print_str % ('.%s[\'%s\']' % (i, j), format_output(b))
+        else:
+            s += print_str % ('.%s' % (i), format_output(a))
+    s += '\n'
+    return s
+
+def print_solutions(solutions):
+    s = print_title('solutions')
+    for i in sorted(solutions):
+        a = solutions[i]
+        for j in sorted(vars(a)):
+            b = vars(a)[j]
+            if j == 'flux':
+                s += print_str % ('[\'%s\'].%s' % (i, j), format_output('<array of length %u (%u nonzero)>' % (len(b), np.sum(np.array(b) != 0))))
+            else:
+                s += print_str % ('[\'%s\'].%s' % (i, j), format_output(b))
+    s += '\n'
+    return s
+
+def print_outputs(outputs):
+    s = print_title('outputs')
+    if not outputs:
+        s += print_str % ('' % (i), format_output(outputs))
+    for i, a in enumerate(outputs):
+        for j in sorted(vars(a)):
+            b = vars(a)[j]
+            if j == 'options':
+                for k in sorted(b):
+                    c = b[k]
+                    s += print_str % ('[%u].%s[\'%s\']' % (i, j, k), format_output(c))
+            else:
+                s += print_str % ('[%u].%s' % (i, j), format_output(b))
+    s += '\n'
+    return s
+
+def print_all(options, materials, anisn_lib, zaid_map, mglib, model, solver_class, method, solutions, outputs):
+    s = ''
+    s += print_options(options)
+    s += print_materials(materials)
+    s += print_anisn_lib(anisn_lib)
+    s += print_zaid_map(zaid_map)
+    s += print_mglib(mglib)
+    s += print_model(model)
+    s += print_solver_class(solver_class)
+    s += print_method(method)
+    s += print_solutions(solutions)
+    s += print_outputs(outputs)
+    return s
+
+def print_mix_table(mix_table):
+    s = print_title('mix_table')
+    for i in sorted(vars(mix_table)):
+        a = vars(mix_table)[i]
+        if i == '_rows':
+            for j, b in enumerate(a):
+                s += print_str % ('.%s[%s]' % (i, j), format_output(b))
+        else:
+            s += print_str % ('.%s' % (i), format_output(a))
+    s += '\n'
+    return s
diff -rN -U0 src-3.2.0-vendor/python/setup.py src-3.2.0-perturb/python/setup.py
--- src-3.2.0-vendor/python/setup.py
+++ src-3.2.0-perturb/python/setup.py
@@ -72,0 +73 @@
+            "advantg.perturbation",
